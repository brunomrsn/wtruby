2009-04-13 Richard Dale  <richard.j.dale@gmail.com>
* Add an optional argument to Wt::ActiveItemModel.
You can pass a list of just the columns you want to display:

  model = Wt::ActiveItemModel.new(products, ['title', 'price'])

Or a hash of label and column names:

  model = Wt::ActiveItemModel.new(products, {'title' => 'My Title', 
                                             'price' = 'Price'})

2009-04-06 Richard Dale  <richard.j.dale@gmail.com>
* Added inspect() and pretty_print() methods to the WModelIndex class
* Fix the WAbstractItemModel#createIndex method so that it works with Ruby 
instances as the third argument
* Add two class to support using ActiveRecord with the Wt::Ruby mvc classes
such as Wt::WTreeView and Wt::Ext::TableView

2009-04-03 Richard Dale  <richard.j.dale@gmail.com>
* When the Ruby runtime starts it sets up signal handlers for all signals,
so that they can be handled with Signal#trap. However, that was disabling
the default behaviour of SIGINT, and control C would no longer terminate a
Wt::Ruby program the way it would the C++ equivalent. So reenable the default
behaviour for SIGINT and make the ruby program quit.

2009-04-01 Richard Dale  <richard.j.dale@gmail.com>
* Improved the INSTALL instructions
* WMenu#addItem wasn't returning the newly created WMenuItem
* Added the wt-homepage example to the Wt 3.x examples

2009-03-30 Richard Dale  <richard.j.dale@gmail.com>
* Raised the Wt::Ruby version number to 0.9.1 for the first release
* Recommend either Wt 2.2.3 or Wt 2.99.0 in the INSTALL instructions

2009-03-27 Richard Dale  <richard.j.dale@gmail.com>
* Special case the marshalling for WFlags types used in virtual methods.
* Change the WT_VERSION check comparison to use 0x02630000 because hex 63 
corresponds to the 99 in 2.99.0.

2009-03-26 Richard Dale  <richard.j.dale@gmail.com>
* Fix the marshalling for the std::vector<unsigned char> type
* Strip WFlags<> templates and leave the underlying enum for return types

2009-03-25 Richard Dale  <richard.j.dale@gmail.com>
* Added JSignal#createCall and JSignal#createEventCall methods
* Add the headers in Wt/Http to the Smoke library code generation

2009-03-23 Richard Dale  <richard.j.dale@gmail.com>
* Don't show boost classes as parents with rbwtapi as they aren't really part
of the public api
* Add marshallers for vectors of WRadioButtons and WGoogleMap::Coordinates
* Change Wt::EventSignal<void> to Wt::EventSignal<> as it no longer compiles
with '<void>' for Wt 2.99.0
* Make dispose() return nil rather than 'self' as it crashes in irb when irb
tries to call inspect() on the return value

2009-03-22 Richard Dale  <richard.j.dale@gmail.com>
* Make rbwtapi skip destructors
* Make lists within templates consistent, and strip spaces round commas
* Add signal type handlers for Wt 2.99.0

2009-03-19 Richard Dale  <richard.j.dale@gmail.com>
* The rbqwtapi tool was calling 'each' on a string which no longer works in 
Ruby 1.9.1 as they aren't Enumerable. So use split instead so that the code
works on both Ruby 1.8.x and 1.9.1. Thanks to Youhei Kondou for the bug
report and fix (for the same code in QtRuby's rbqtapi tool).

2009-03-18 Richard Dale  <richard.j.dale@gmail.com>
* Some signal types are references in Wt 3.0 when they were just values in 
Wt 2.x, so add the new types to the marshallers table

2009-03-15 Richard Dale  <richard.j.dale@gmail.com>
* Added 'rbwtapi' a command line introspection tool for the Wt::Ruby api.
Example usage of rbwtapi:

$ rbwtapi --help
rbwtapi - a Wt::Ruby introspection tool

usage: rbwtapi [-h] [-v] [-p] [-m <re> [-i]] [-r <extension> ...] [<class>]

options:
    -m <re> : find all functions matching regular expression/keyword <re>
    -i : together with -m, performs a case insensitive search
    -p : also display inherited methods for <class>
    -s | show method names with ruby types
    -r : require a Wt::Ruby extension
    -v : print Wt::Ruby and Wt versions
    -h : print this help message

$ rbwtapi -m objectName Wt::WObject
std::string Wt::WObject::objectName() const

$ rbwtapi -m objectName -s Wt::WObject
String Wt::WObject#objectName

* Fixed bug in unmapPointer() which meant that no pointers ever got unmapped,
oops! This meant that a C++ instance created via a call to Ruby new() could be
deleted, and the Ruby side wouldn't know about it. When the address was
reused for another C++ instance, the Wt::Ruby runtime would still think it was
associated with the old instance, causing seg faults and/or strange behaviour.
* Improved the garbage collection debug logging option so that it logs the
Ruby VALUE and not the address of the VALUE consistently.
* Made the smoke library code generation work with Wt 2.99 and the runtime 
compile and work with it.
* Updated the INSTALL instructions so they say that Wt 2.2.3 or Wt 2.99 can be
used, and also Ruby 1.8.x or Ruby 1.9.1
* Rename the examples directory 'examples_2_0' and create a new directory
'examples_3_0' for any examples converted to use Wt 2.99/3.x
* A problem has been found with QtRuby when it is run with Ruby 1.9.1
and GC.stess is true - the same problem will occur with Wt::Ruby.
In the smokeruby_mark() function called during garbage collection, 
any virtual methods which are called on the instances being checked 
could have overriden by Ruby methods.  So the Wt::Ruby runtime uses 
'respond_to()' to find out whether they have been overriden.
However, this involves calling 'rb_intern()' on the method name,
which means memory could be allocated, giving an error when running under
GC.stress mode. So workround it by pre-allocating any strings with
rb_intern() for all the C++ methods used in smokeruby_mark()

2009-02-11 Richard Dale  <richard.j.dale@gmail.com>
* Improved the hash() function for Wt::Base classes to work with 64 bit 
pointers
* Fixed warnings in rb_raise() calls about format args being wrong

2009-02-10 Richard Dale  <richard.j.dale@gmail.com>
* Add hash() and eql?() methods to the Wt::Base class. This is so that if the
same C++ instance is wrapped more than once in a Ruby instance, they are 
considered equal to each other from the point of view of keys to Hashes. This
fixes a bug in the Wt::WSignalMapper class, whether the data associated with
mapped signals kept in a Hash was not being found when the signal was emitted.

2009-02-04 Richard Dale  <richard.j.dale@gmail.com>
* In Ruby 1.9.1 the arity of a block with no arguments is 0, whereas in Ruby 
1.8.x it is -1. This meant that blocks passed to QtRuby constructors with no 
args weren't working with Ruby 1.9.1

2009-02-03 Richard Dale <richard.j.dale@gmail.com>
* Change the license of Wt::Ruby from GPL to LGPL 2 and update the license
headers in the source files. See the LICENSES and AUTHORS files for more
details.

2009-02-02 Richard Dale <richard.j.dale@gmail.com>
* Made Wt::Ruby build with Ruby 1.9.1 as well as 1.8.x
* Ported the examples to work with Ruby 1.9.1. Mostly 'when statements' ending
in colons needing fixing. Changed character literals like '?,' to '?,.ord'. 
Added '# encoding: utf-8' at the top of any sources with multi-byte characters
in them.

2009-02-01 Richard Dale <richard.j.dale@gmail.com>
* Wt::Internal#try_intialize now catches a symbol :wtnew, which should be 
compatible with Ruby 1.9.x

2009-01-31 Richard Dale <richard.j.dale@gmail.com>
* The gitmodel example now works

2009-01-29 Richard Dale <richard.j.dale@gmail.com>
* The construct_copy() function wasn't working with class names containing 
'::', which happens to be all of the classes in Wt::Ruby. Add some logging
when running in garbage collection debug mode to give a warning that a copy 
has failed. Also put the function in the Wt::Ruby namespace.
* Added a marshaller for Wt::Signal<> type as a synonym for Wt::Signal<void>
* Added uint64_t and int64_t marshallers
* Got WAbstractItemModel.createIndex() working with both 'void *' (ie Ruby 
instances), and uint64_t (Ruby Fixnums).
* Added a not quite working gitmodel example

2009-01-28 Richard Dale <richard.j.dale@gmail.com>
* Added a Wt::dynamic_cast() method for use when the corresponding C++ code 
would have needed a dynamic cast. For instance, this C++ code:

    WItemSelectionModel *selection
      = dynamic_cast<WItemSelectionModel *>(event.source());

In Ruby is translated to:

    selection = Wt::dynamic_cast(event.source, Wt::WItemSelectionModel)

* Added a marshaller for std::map<int,boost::any> types
* Fixed the treeview-dragdrop to work with a single threaded version of the
wthttp lib by adding a constant MULTI_THREADED, value false, and not making
any calls that depend on multi-threading.
* Added a std::map<std::string,std::string> marshaller

2009-01-27 Richard Dale <richard.j.dale@gmail.com>
* Added the treeview-dragdrop example, but can't get drag and drop to work 
with it in either Ruby or C++
* Added the Wt::Signal<Wt::WModelIndex,Wt::WMouseEvent> signal type

2009-01-26 Richard Dale <richard.j.dale@gmail.com>
* Special case the WMenu#addItem method and keep the 'contents' arg values in 
a hash to prevent ruby from garbage collecting them. They aren't directly 
accessible from the Wt C++ api once they've been added to a Wt::MenuItem, and
that makes it impossible for the code in the smokeruby_mark() function to mark
them as not needing garbage collection when traversing the WMenu/WMenuItem 
heirarchy.
* In Wt, various enums are defined in terms of other enums, for instance 
Wt::WWidget::None is defined as Wt::None. Add the same equivalent names to the 
Wt::Ruby classes.
* Change the name of the WMenu hash to 'item_contents' and make the key the id
of the WMenuItem, as this is useful for debugging
* Remove the WDllDefs.h from the wt_header_list as it was messing up the code
generation of the Smoke library with Wt 2.2.3
* More fixes for the examples
* Added @item_contents instance variables to Wt::WMenuItem and 
Wt::WSubMenuItem so that they can be added to the item_contents hash table of
an owning WMenu, to help with coordinating Ruby garbage collection with Wt
* Added a 'dump_objects.rb' script to print out a tree of WObjects in a 
running program 
* Removed 'GC.disable' from the widgetgallery example
* Fix int64_t and uint64_t arg types
* Skip the WWidget::render method for now

2009-01-25 Richard Dale <richard.j.dale@gmail.com>
* When an item is marked for not needing garbage collection show the actual
Ruby class in the debug logging
* Fixed some bugs in the widgetgallery dialogwidgets examples
* Added inspect() and pp() methods for Wt::WSubMenuItem and added a 'text'
item to the Wt::WMenuItem inspect method
* More tweaks to the widgetsgallery demo. Disable Ruby garbage collection for
now until problems in coordinating GC with Wt are fixed
* Some improvements to the smokeruby_mark() function and garbage collection
logging
* The url escaping code in the widgetgallery example was wrong

2009-01-24 Richard Dale <richard.j.dale@gmail.com>
* Fixed bugs in the widgetgallery 'Form Validators' option
* The Pie Chart example wasn't calling super in its WContainer constructor and
was causing a seg fault
* Various fixes for the widgetgallery Ext Dialog example, and added a 
'status=()' method to the event displayer
* Added a text value to the WLineEdit inspect() and pp() methods

2009-01-23 Richard Dale <richard.j.dale@gmail.com>
* Added the widgetgallery example, and amended the charts, dragdrop and 
painting examples to work with it.

2009-01-22 Richard Dale <richard.j.dale@gmail.com>
* There was an exception in the virtual method callback code to ignore any
load() methods as they clashed with the Ruby Kernel#load method. However,
Kernel#load is a module method, and a respond_to? test on a Wt::Ruby instance 
won't ever be true. So remove the load() special casing. This makes the code
for DeferredWidgets in the wt-homepage and widgetgallery examples work 
correctly.
* Special cased the Wt::WButtonGroup.addButton() method so that it works with
Ext::RadioButtons
* Added support for JSignal<bool>, JSignal<int> and JSignal<int,int> types.
The Ext::ComboBox activated signal of type JSignal<int> now works correctly
* Added marshallers for various std::set types

2009-01-20 Richard Dale <richard.j.dale@gmail.com>
* Skip methods called 'impl' in the Smoke library generation
* Add a marshaller for std::vector<Wt::WString>

2009-01-19 Richard Dale <richard.j.dale@gmail.com>
* When a WServer method raises a C++ exception, convert it to a Ruby runtime
error calling rb_raise()

2009-01-18 Richard Dale <richard.j.dale@gmail.com>
* Added a Wt::wt_version to return the version string of the Wt lib being used
* Raise the version string of Wt::Ruby to 0.9.0
* The Wt::WServer.setEntryPoint() method that can be passed a Ruby block
like this:

    server.addEntryPoint(Wt::WServer::Application) do |env|
      HelloApplication.new(env, false)
    end

Some more work needs to be done to translate C++ exceptions to Ruby ones for
the WServer methods
* Added the hello-widgetset example
* Added WTHTTP_CONFIGURATION, RUNDIR and WT_CONFIG_XML top level constants
corresponding to the ones in the WConfig.h header
* Don't repeat the code to convert from ARGV to argc/argv and add a utility
function args2argv()
* Added patch from Koen Deforche to fix a looping on startup problem. Thanks
for the patch, but I'm not sure why only certain users are affected.
* Added the treeview example

2009-01-16 Richard Dale <richard.j.dale@gmail.com>
* Removed the simplechat example as it only works with the multi-threaded 
version of libwthttp, which can't be used with Wt::Ruby

2009-01-15 Richard Dale <richard.j.dale@gmail.com>
* Allow Ruby Date and Time instances to be passed to the Wt::WDate and 
Boost::Any constructors
* Remove the optimization in the mark function to only traverse the tree of 
children of WObjects which don't have parents and always traverse instead.

2009-01-11 Richard Dale <richard.j.dale@gmail.com>
* Added a wt.rb file that is installed and will pull in either 'wthttp' or the
'wtfcgi' extensions according to the value of the 'WT_ENV' environment variable
* Add '#!/usr/bin/ruby' to the example program sources

2008-12-28 Richard Dale <richard.j.dale@gmail.com>
* Instead of a single 'wt' ruby extension linked against libwthttp, build two
ruby extensions 'wthttp' and 'wtfcgi' linked against the http and fcgi 
connectors respectively. 
* Wt::Ruby programs, such as the examples, could still have require 'wt' 
statements, and they could be set up to actually pull in either the 'wthttp'
or 'wtfcgi' extension according to whether they are to be used in a 
development or production environment. For instance, in wt.rb:

    if ENV['WT_ENV'] == 'production'
      require 'wtfcgi'
    elsif ENV['WT_ENV'] == 'development'
      require 'wthttp'
    end

* Removed redundant copies of the Ext javascript code in the examples

2008-12-26 Richard Dale <richard.j.dale@gmail.com>
* Stateless slots cannot have any arguments, however they can be connected to
signals which have arguments. So when an EventSignal is connected to a slot
with arity zero then check for whether the slot is stateless.
* Fixed some bugs in the treelist example.

2008-12-24 Richard Dale <richard.j.dale@gmail.com>
* Added an ancestors() method for the Wt:: classes
* Rename classnameMap as IdToClassNameMap to be consistent with QtRuby

2008-12-23 Richard Dale <richard.j.dale@gmail.com>
* Added an implementation of stateless slots. Example usage:

    implementStateless(:showIcon1, :undoShowIcon1)

2008-12-19 Richard Dale <richard.j.dale@gmail.com>
* When the construct_copy() function was used to copy an instance, it wasn't
initializing the binding for the new instance. This caused a crash when the
destructor for the instance tried to make a callback with the null binding. 
* Added a std::vector<Wt::WStandardItem*> marshaller
* If a set method setXXX() already existed for an instance variable XXX, then
the type of the variable wasn't being registered, and smoke code generation 
failed

2008-12-18 Richard Dale <richard.j.dale@gmail.com>
* Added Ruby 1.9 compatible RSTRING handling
* Update the wt_header_list with the Wt 2.2.2 headers and tweak the smoke lib
code generation for the smoke lib to work
* However, the Wt::WPopupMenu header is missing a Wt/WApplication include

2008-12-14 Richard Dale <richard.j.dale@gmail.com>
* Added Wt::WModelIndex.internalPointer() and 
Wt::WAbstractItemModel.createIndex() methods

2008-12-12 Richard Dale <richard.j.dale@gmail.com>
* Updated the smoke.h header with improved binary chop code
